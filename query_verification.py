from google import genai
from google.genai import types

project_id = "deeplabel-india"
# model = "gemini-2.5-flash"
model = "gemini-2.0-flash-001"
# model="gemini-2.5-pro"

client = genai.Client(project=project_id, location="global", vertexai=True)

generate_content_config = types.GenerateContentConfig(
    temperature = 0,
    top_p = 1, 
    seed = 0,
    max_output_tokens = 8000,
    safety_settings = [types.SafetySetting(
      category="HARM_CATEGORY_HATE_SPEECH",
      threshold="OFF"
    ),types.SafetySetting(
      category="HARM_CATEGORY_DANGEROUS_CONTENT",
      threshold="OFF"
    ),types.SafetySetting(
      category="HARM_CATEGORY_SEXUALLY_EXPLICIT",
      threshold="OFF"
    ),types.SafetySetting(
      category="HARM_CATEGORY_HARASSMENT",
      threshold="OFF"
    )],
    response_mime_type = "application/json"
  )


def verify_query(user_query: str, sql_query: str, schema: str):
    instruction = f"""You are an advanced SQL verification Expert. Your task is to verify whether the generated SQL query is correct. The SQL query has been generated by the Gemini model. This query will be directly executed on Bigquery, so its correctness is critical.

Your GOAL: Make sure the SQL query works PERFECTLY with the schema and BigQuery rules — no missing columns, no typos, no bad logic, no broken syntax.

**THINK STEP BY STEP**:
1. Parse the provided SQL query for syntax, structure, and intent.
2. Cross-check table names, column names, and data types against the provided schema, using only columns defined in `{schema}`.
3. Confirm the query accurately addresses the user's question (`{user_query}`) without unnecessary changes.
4. Explicitly handle null values in all columns using `COALESCE`, `IFNULL`, or `IS NOT NULL` checks, ensuring no nulls in aggregations or percentage calculations by excluding `NULL` values where they distort results.
5. Ensure the query’s logic (e.g., filters, joins, aggregations) is correct, matches the schema’s domain, and adheres to BigQuery syntax.
6. If fixable, correct the query while preserving the user’s intent. If unfixable (e.g., invalid table, unresolvable logic), return `-- Query unfixable: [reason]`.

**STRICT REQUIREMENTS**:
1. Validate the query against the provided schema and additional details of the tables.
2. Ensure that the query accurately reflects the user's question and does not introduce any unnecessary changes.
3. Ensure the verified query matches the table schema. Cross-check the table and column names, and adjust the query if discrepancies are found.

Question asked by the user:
{user_query}

Query generated by the model:
{sql_query}


**Column Descriptions (from bigquery-public-data.san_francisco_311.311_service_requests)**:
- service_request_id (STRING): Unique identifier for the request
- status (STRING): Current status of the request (e.g., open, closed)
- status_notes (STRING): Additional status details
- agency_responsible (STRING): Department handling the request
- service_name (STRING): Type of city service requested
- service_subtype (STRING): More specific category of the request
- requested_datetime (TIMESTAMP): Time when the request was created
- updated_datetime (TIMESTAMP): Last update timestamp
- expected_datetime (TIMESTAMP): Expected resolution date
- closed_date (TIMESTAMP): When the request was marked as closed
- address (STRING): Request location
- street (STRING): Street name
- supervisor_district (STRING): Supervisor district of the address
- neighborhood (STRING): Neighborhood in San Francisco
- point (GEOGRAPHY): Geographical coordinates
- source (STRING): How the request was submitted (e.g., mobile app, phone)
- media_url (STRING): Link to media related to the request
- lat (FLOAT64): Latitude
- long (FLOAT64): Longitude
- created_at (TIMESTAMP): When the record was added
- closed_at (TIMESTAMP): When the request was closed (duplicate of closed_date)

 
check for the syntax correctness in the query
---
Many queries break or return **empty result sets** when `IS NOT NULL` is added to columns that may naturally contain NULLs.
---
 **STEP-BY-STEP VERIFICATION INSTRUCTIONS**

1. **Understand the User's Request**
   - Query should align with this:  
     ```text
     {user_query}
     ```

If the query is valid, return it exactly as-is.  
If it needs changes, return a **corrected version** using this JSON format:
        Provide the final result in the following format:
        ```json
        {{"correct_query": "Provide the correct query here"}}
        ```
        
ANALYSE AND REMOVE NULL HANDLING WHEREVER NECESSARY IN THE QUERY
"""
    full_prompt = instruction + "\n\nVerify the query."
    contents = [ 
    {
        "role": "user",
        "parts": [{"text": full_prompt}]
    }]
    response = client.models.generate_content(
        contents=contents,
        model=model,
        config=generate_content_config
    )
    response_text = response.text
    print(response_text)
    return response_text
